#include <iostream>
#include <vector>
#include <climits>

using namespace std;

#define INFINITY INT_MAX

struct Vertex {
    int city;
    int distance;
};
// ALGORITMO DE DIJKSTRA
int dijkstra(vector<vector<int>>& graph, int numVertices, int source, int destination, int forbidden) {
    vector<int> distances(numVertices, INFINITY);
    vector<bool> visited(numVertices, false);

    distances[source] = 0;

    for (int i = 0; i < numVertices - 1; i++) {
        int minDistance = INFINITY;
        int minVertex;

        for (int v = 0; v < numVertices; v++) {
            if (!visited[v] && distances[v] <= minDistance) {
                minDistance = distances[v];
                minVertex = v;
            }
        }

        visited[minVertex] = true;

        for (int v = 0; v < numVertices; v++) {
            if (!visited[v] && graph[minVertex][v] && distances[minVertex] != INFINITY &&
                distances[minVertex] + graph[minVertex][v] < distances[v] && v != forbidden) {
                distances[v] = distances[minVertex] + graph[minVertex][v];
            }
        }
    }

    int shortestDistance = distances[destination];
    return shortestDistance;
}

int main() {
    int N, M;
    while (cin >> N >> M) {
        vector<vector<int>> graph(N, vector<int>(N, 0));

        for (int i = 0; i < M; i++) {
            int A, B;
            cin >> A >> B;
            graph[A - 1][B - 1] = 1;
            graph[B - 1][A - 1] = 1;
        }

        int C, R, E;
        cin >> C >> R >> E;

        int shortestDistance = dijkstra(graph, N, C - 1, R - 1, E - 1);
        cout << shortestDistance << endl;
    }

    return 0;
}
